package es.gloin.cloudtest.servlet;

import static org.springframework.data.mongodb.core.query.Criteria.where;

import java.util.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.authentication.UserCredentials;
import org.springframework.data.mongodb.MongoDbFactory;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import com.mongodb.MongoException;

import es.gloin.cloudtest.model.UserModel;

@Controller
@RequestMapping("/services")
public class MainController {

	static final UserCredentials credentials = new UserCredentials("admin", "MfEwMnHSH-9N");

	@Autowired
	MongoDbFactory mongoDbFactory;

	@RequestMapping(value="/config", produces = "application/json; charset=utf-8",  method = RequestMethod.GET)
	public @ResponseBody
	Map<String, String> getConfig() {
		Map<String, String> configMap = new HashMap<String, String>();
		configMap.put("mongodbconnectpoint", mongoDbFactory.getDb().getMongo().getConnectPoint());
		configMap.put("mongodb", mongoDbFactory.getDb().toString());
		return configMap;
	}

	@RequestMapping(value="/userTest", produces = "application/json; charset=utf-8",  method = RequestMethod.GET)
	public @ResponseBody UserModel getUser() {
		UserModel user = new UserModel();
		user.setId(1);
		user.setName("Nombre");
		user.setLastName("Apellido");
		return user;
	}
	
	@RequestMapping(value="/createUser/{userName}/{lastName}", produces = "application/json; charset=utf-8",  method = RequestMethod.GET)
	public @ResponseBody UserModel createUser(@PathVariable("userName") String userName, @PathVariable("lastName") String lastName ) {

		UserModel user = new UserModel();
		user.setId(new Random().nextInt());
		user.setName(userName);
		user.setLastName(lastName);

		MongoOperations mongoOps;
		try {
			mongoOps = getMongoTemplate();
		    mongoOps.insert(user);
		} catch (MongoException e) {
			e.printStackTrace();
		}
		return user;
	}

	private MongoTemplate getMongoTemplate() {
		if (mongoDbFactory.getDb().getMongo().getAddress().getHost().equalsIgnoreCase("localhost")) {
			return new MongoTemplate(mongoDbFactory);
		} else {
			return new MongoTemplate(mongoDbFactory.getDb().getMongo(), mongoDbFactory.getDb().getName(), credentials);
		}
	}

	@RequestMapping(value="/user/{userName}/", produces = "application/json; charset=utf-8",  method = RequestMethod.GET)
	public @ResponseBody UserModel obtainUser(@PathVariable("userName") String userName) {

		UserModel user = new UserModel();
		MongoOperations mongoOps;
		try {
			mongoOps = getMongoTemplate();
			user = mongoOps.findOne(new Query(where("name").is(userName)), UserModel.class);
		} catch (MongoException e) {
			e.printStackTrace();
		}
		return user;
	}

	@RequestMapping(value="/users", produces = "application/json; charset=utf-8",  method = RequestMethod.GET)
	public @ResponseBody
	List<UserModel> allUsers() {

		List<UserModel> userList = new ArrayList<UserModel>();
		MongoOperations mongoOps;
		try {
			mongoOps = getMongoTemplate();
			userList = mongoOps.findAll(UserModel.class);
		} catch (MongoException e) {
			e.printStackTrace();
		}
		return userList;
	}
}
